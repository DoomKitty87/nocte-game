// Each #kernel tells which function to compile; you can have many kernels_chunkTopLeftPosition
#pragma kernel ComputePosition
// thanks elliot
#define TWO_PI 6.28318530718f
#define DEG_TO_RAD 0.01745329251f
// ====== Settings
uniform uint _samples;
uniform float _size;
// ====== Depends
uniform float3 _chunkBottomLeftPosition;
// ====== Chunking / Heightmap
Texture2D<float> _tileHeightmapTexture;
SamplerState sampler_tileHeightmapTexture;
uniform uint _tileHeightmapTextureWidth;
uniform float _tileWidth;
uniform float3 _tileBottomLeftPosition;
// ====== Output
RWStructuredBuffer<float4> _positionOutputBuffer;
// RWStructuredBuffer<float> _debugCPUReadbackBuffer;

// ======


// Pseudo-random number between min and max, from shadergraph compiled code(?)
float randomRange(float2 seed, float min, float max)
{
	const float randNum = frac(sin(dot(seed, float2(12.9898, 78.233)))*143758.5453);
	return lerp(min, max, randNum);
}

float GetHeightmapAtWorldPosition(float2 position)
{
  // Transform to align to texture
	float2 uv = float2(position.x - _tileBottomLeftPosition.x, position.y - _tileBottomLeftPosition.z) / _tileWidth;

  // Sample with triangle interpolation
  float w = float(_tileHeightmapTextureWidth - 1);
  float2 tuv = uv * w % 1;
  float tile = 1 / float(_tileHeightmapTextureWidth - 1);
  float2 fuv = floor(uv * w) / w;
  float pointA = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv, 0);
  float pointB = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv + float2(tile, 0), 0);
  float pointC = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv + float2(0, tile), 0);
  float pointD = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv + float2(tile, tile), 0);
  float val = 0;
  if (tuv.x > (1 - tuv.y))
  {

    float w1 = -(tuv.y - 1);
    float w2 = -(tuv.x - 1);
    float w3 = 1 - w1 - w2;

    val = w1 * pointB + w2 * pointC + w3 * pointD;

  }
  else
  {

    float w1 = (tuv.y);
    float w2 = -(tuv.x - 1) - (tuv.y);
    float w3 = 1 - w1 - w2;

    val = w1 * pointC + w2 * pointA + w3 * pointB;
  }
	return val;
}

[numthreads(64,1,1)]
void ComputePosition(uint3 id : SV_DispatchThreadID)
{

  // Calculate grass position
	uint sampleIndex = id.x; // useless, but reminds me that id takes into account the number of groups so i never have to suffer again
	float2 samplePosition;
  float spacing = _size / _samples;
	samplePosition.y = floor(sampleIndex / _samples);
	samplePosition.x = sampleIndex % _samples; // never mod by floats, inaccuracies cause issues
	float3 worldPos = float3(samplePosition.x * spacing + spacing / 2, 0, samplePosition.y * spacing + spacing / 2) + _chunkBottomLeftPosition;
	worldPos.x += randomRange(float2(id.x, id.x % 0.35) + _chunkBottomLeftPosition.xz, -spacing / 2, spacing / 2);
	worldPos.z += randomRange(float2(id.x, id.x % 0.52) + _chunkBottomLeftPosition.xz, -spacing / 2, spacing / 2);
	worldPos.y = GetHeightmapAtWorldPosition(worldPos.xz);
  
	_positionOutputBuffer[sampleIndex] = float4(worldPos, 1); //(x, y) applies x then y, do not use the function notation in the 3blue1brown video, it is wrong
}
