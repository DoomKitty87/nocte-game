// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputePosition
// thanks elliot lmao
#define TWO_PI 6.28318530718f
#define DEG_TO_RAD 0.01745329251f

uniform uint _samplesX;
uniform uint _samplesZ;
uniform float _sizeX;
uniform float _sizeZ;
uniform float _padding;
uniform float3 _tilePivotWorldPosition;
uniform float3 _chunkPivotWorldPosition;
// ======
Texture2D<float> _tileHeightmapTexture;
SamplerState sampler_tileHeightmapTexture;

uniform uint _tileHeightmapTextureWidth;
uniform uint _chunkSplitFactor;
// ======
RWStructuredBuffer<float4x4> _positionOutputBuffer;
uniform uint _indexOffset;
RWStructuredBuffer<float> _debugCPUReadbackBuffer;

// Pseudo-random number between min and max, from shadergraph compiled code(?)
float randomRange(float2 seed, float min, float max)
{
	const float randNum = frac(sin(dot(seed, float2(12.9898, 78.233)))*143758.5453);
	return lerp(min, max, randNum);
}

float4x4 GetMatrixWithRotationY(float angle)
{
	float s, c;
	sincos(angle, s, c);

	return float4x4
	(
		c, 0, s, 0,
		0, 1, 0, 0,
		-s, 0, c, 0,
		0, 0, 0, 1
	);
}

float4x4 PositionToTransformMatrix(float3 position)
{
	float x = position.x;
	float y = position.y;
	float z = position.z;
	return float4x4(
		1, 0, 0, x,
		0, 1, 0, y,
		0, 0, 1, z,
		0, 0, 0, 1);
}

// TODO: fix this 
float GetHeightmapAtWorldPosition(float2 position)
{
  float fac = (_tileHeightmapTextureWidth) / (_tileHeightmapTextureWidth - 1);
	float2 uv = float2((position.x - _tilePivotWorldPosition.x) / _sizeX, (position.y - _tilePivotWorldPosition.z) / _sizeZ) / (_chunkSplitFactor * 2) / fac;
  uv += 0.5 / _tileHeightmapTextureWidth;
	return _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, uv, 0);
}

[numthreads(64,1,1)]
void ComputePosition(uint3 id : SV_DispatchThreadID)
{
	uint sampleIndex = id.x; // useless, but reminds me that id takes into account the number of groups so i never have to suffer again
	float2 samplePosition;
	samplePosition.y = floor(sampleIndex / _samplesX);
	samplePosition.x = sampleIndex % _samplesX; // never mod by floats, inaccuracies cause issues
	float xSpacing = _sizeX / _samplesX;
	float zSpacing = _sizeZ / _samplesZ;
	float3 worldPos = float3(samplePosition.x * xSpacing + xSpacing / 2, 0, samplePosition.y * zSpacing + zSpacing / 2) + _chunkPivotWorldPosition;
	worldPos.x += randomRange(float2(id.x, id.x % 0.35) + _chunkPivotWorldPosition.xz, -xSpacing / 2, xSpacing / 2);
	worldPos.z += randomRange(float2(id.x, id.x % 0.52) + _chunkPivotWorldPosition.xz, -zSpacing / 2, zSpacing / 2);
	worldPos.y = GetHeightmapAtWorldPosition(worldPos.xz);
	// worldPos = worldPos + float3(-_sizeX / 2, 0, -_sizeZ / 2); // centerize, remove for proc gen
	float4x4 rotMatrix = GetMatrixWithRotationY(randomRange(worldPos.xz, 0, TWO_PI));
	_positionOutputBuffer[sampleIndex + _indexOffset] = mul(PositionToTransformMatrix(worldPos), rotMatrix); //(x, y) applies x then y, do not use the function notation in the 3blue1brown video, it is wrong
	_debugCPUReadbackBuffer[sampleIndex + _indexOffset] = worldPos.y;
}
