// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputePosition

uniform int _samplesX;
uniform int _samplesZ;
uniform float _sizeX;
uniform float _sizeZ;
uniform float _padding;
uniform float3 _worldPosition;
// ======
RWStructuredBuffer<float3> _positionOutputBuffer;

[numthreads(64,1,1)]
void ComputePosition (uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID)
{
   int sampleIndex = 64 * groupId.x + id.x;
   float2 samplePosition;
   samplePosition.y = floor(sampleIndex / _samplesX);
   samplePosition.x = sampleIndex % _samplesX;
   float xSpacing = _sizeX / _samplesX;
   float zSpacing = _sizeZ / _samplesZ;
   _positionOutputBuffer[sampleIndex] = float3(samplePosition.x * xSpacing, 0, samplePosition.y * zSpacing) + _worldPosition;
}
