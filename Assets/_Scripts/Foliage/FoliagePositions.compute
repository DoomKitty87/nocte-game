// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputePosition
// thanks elliot
#define TWO_PI 6.28318530718f
#define DEG_TO_RAD 0.01745329251f
// ====== Settings
uniform uint _samples;
uniform float _size;
// ====== Depends
uniform float3 _chunkBottomLeftPosition;
// ====== Chunking / Heightmap
Texture2D<float> _tileHeightmapTexture;
Texture2D<float> _tileGrowthTexture;
SamplerState sampler_tileHeightmapTexture;
SamplerState sampler_tileGrowthTexture;
uniform uint _tileHeightmapTextureWidth;
uniform float _tileWidth;
uniform float3 _tileBottomLeftPosition;
RWStructuredBuffer<float4> _boundsBuffer;
uniform uint _structureBoundsCount;
// ====== Output
RWStructuredBuffer<float4> _positionOutputBuffer;
// RWStructuredBuffer<float> _debugCPUReadbackBuffer;

// ====== Noise Settings

uniform float _noiseScale;
uniform uint _noiseOctaves;
uniform float _noisePersistence;
uniform float _noiseLacunarity;
uniform float _noiseOffset;
uniform float _noiseCutoff;

// From Unity Shadergraph
inline float unity_noise_randomValue (float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233)))*43758.5453);
}

inline float unity_noise_interpolate (float a, float b, float t)
{
    return (1.0-t)*a + (t*b);
}

inline float unity_valueNoise (float2 uv)
{
    float2 i = floor(uv);
    float2 f = frac(uv);
    f = f * f * (3.0 - 2.0 * f);

    uv = abs(frac(uv) - 0.5);
    float2 c0 = i + float2(0.0, 0.0);
    float2 c1 = i + float2(1.0, 0.0);
    float2 c2 = i + float2(0.0, 1.0);
    float2 c3 = i + float2(1.0, 1.0);
    float r0 = unity_noise_randomValue(c0);
    float r1 = unity_noise_randomValue(c1);
    float r2 = unity_noise_randomValue(c2);
    float r3 = unity_noise_randomValue(c3);

    float bottomOfGrid = unity_noise_interpolate(r0, r1, f.x);
    float topOfGrid = unity_noise_interpolate(r2, r3, f.x);
    float t = unity_noise_interpolate(bottomOfGrid, topOfGrid, f.y);
    return t * 2 - 1;
}

void foliageNoise(float2 position, out float val)
{
  float v = 0.0;

  float compensation = 0;

  for (uint i = 0; i < _noiseOctaves; i++)
  {
    float2 p = (position + _noiseOffset) * _noiseScale * pow(_noiseLacunarity, i);
    v += unity_valueNoise(p) * pow(_noisePersistence, i);
    compensation += pow(_noisePersistence, i);
  }

  val = v / compensation;
}

// Pseudo-random number between min and max, from shadergraph compiled code(?)
float randomRange(float2 seed, float min, float max)
{
	const float randNum = frac(sin(dot(seed, float2(12.9898, 78.233)))*143758.5453);
	return lerp(min, max, randNum);
}

float GetHeightmapAtWorldPosition(float2 position)
{
  float nval = 0;
  foliageNoise(position, nval);
  if (nval < _noiseCutoff) return 0;

  for (uint i = 0; i < _structureBoundsCount; i++)
  {
    float2 corner1 = _boundsBuffer[i].xy;
    float2 corner2 = _boundsBuffer[i].zw;
    
    if ((position.x > corner1.x && position.x < corner2.x) || (position.x < corner1.x && position.x > corner2.x))
    {
      if ((position.y > corner1.y && position.y < corner2.y) || (position.y < corner1.y && position.y > corner2.y))
      {
        return 0;
      }
    }
  }

  // Transform to align to texture
	float2 uv = float2(position.x - _tileBottomLeftPosition.x, position.y - _tileBottomLeftPosition.z) / _tileWidth;

  // Sample with triangle interpolation
  float w = float(_tileHeightmapTextureWidth - 1);
  float2 tuv = uv * w % 1;
  float tile = 1 / float(_tileHeightmapTextureWidth - 1);
  float2 fuv = floor(uv * w) / w;
  float pointA = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv, 0);
  float pointB = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv + float2(tile, 0), 0);
  float pointC = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv + float2(0, tile), 0);
  float pointD = _tileHeightmapTexture.SampleLevel(sampler_tileHeightmapTexture, fuv + float2(tile, tile), 0);
	float pointA2 = _tileGrowthTexture.SampleLevel(sampler_tileGrowthTexture, fuv, 0);
	float pointB2 = _tileGrowthTexture.SampleLevel(sampler_tileGrowthTexture, fuv + float2(tile, 0), 0);
	float pointC2 = _tileGrowthTexture.SampleLevel(sampler_tileGrowthTexture, fuv + float2(0, tile), 0);
	float pointD2 = _tileGrowthTexture.SampleLevel(sampler_tileGrowthTexture, fuv + float2(tile, tile), 0);
  float val = 0;
  if (tuv.x > (1 - tuv.y))
  {

    float w1 = -(tuv.y - 1);
    float w2 = -(tuv.x - 1);
    float w3 = 1 - w1 - w2;

    val = w1 * pointB + w2 * pointC + w3 * pointD;
  	float norm = w1 * pointB2 + w2 * pointC2 + w3 * pointD2;
  	norm += randomRange(position, -0.2f, 0.2f);
  	if (norm < 0.5f) val = 0;
  }
  else
  {

    float w1 = (tuv.y);
    float w2 = -(tuv.x - 1) - (tuv.y);
    float w3 = 1 - w1 - w2;

    val = w1 * pointC + w2 * pointA + w3 * pointB;
  	float norm = w1 * pointC2 + w2 * pointA2 + w3 * pointB2;
  	norm += randomRange(position, -0.2f, 0.2f);
  	if (norm < 0.5f) val = 0;
  }
	return val;
}

[numthreads(64,1,1)]
void ComputePosition(uint3 id : SV_DispatchThreadID)
{

  // Calculate grass position
	uint sampleIndex = id.x; // useless, but reminds me that id takes into account the number of groups so i never have to suffer again
	float2 samplePosition;
  float spacing = _size / _samples;
	samplePosition.y = floor(sampleIndex / _samples);
	samplePosition.x = sampleIndex % _samples; // never mod by floats, inaccuracies cause issues
	float3 worldPos = float3(samplePosition.x * spacing + spacing / 2, 0, samplePosition.y * spacing + spacing / 2) + _chunkBottomLeftPosition;
	worldPos.x += randomRange(float2(id.x, id.x % 0.35) + _chunkBottomLeftPosition.xz, -spacing / 2, spacing / 2);
	worldPos.z += randomRange(float2(id.x, id.x % 0.52) + _chunkBottomLeftPosition.xz, -spacing / 2, spacing / 2);
	worldPos.y = GetHeightmapAtWorldPosition(worldPos.xz);

  float worldRot = randomRange(float2(id.x, id.x % 0.35) + _chunkBottomLeftPosition.xz, 0, TWO_PI);
  
	_positionOutputBuffer[sampleIndex] = float4(worldPos, worldRot); //(x, y) applies x then y, do not use the function notation in the 3blue1brown video, it is wrong
}
