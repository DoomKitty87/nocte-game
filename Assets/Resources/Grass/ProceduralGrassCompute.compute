#pragma kernel CalculateBladePositions

StructuredBuffer<int> _TerrainTriangles;
StructuredBuffer<float3> _TerrainPositions;

uniform float4x4 _ChunkPosition;

RWStructuredBuffer<float4x4> _TransformMatrices;
uniform int _TerrainTriangleCount;
uniform float _Scale;
uniform float _MinBladeHeight;
uniform float _MaxBladeHeight;
uniform float4x4 _TerrainObjectToWorld;
uniform float _NumberOfBladesPerTri;

#define TWO_PI 6.28318530718f

// Pseudo-random number between min and max
float randomRange(float2 seed, float min, float max)
{
	const float randNum = frac(sin(dot(seed, float2(12.9898, 78.233)))*143758.5453);
    return lerp(min, max, randNum);
}

float4x4 rotateY(float angle)
{
    float s, c;
    sincos(angle, s, c);

    return float4x4
    (
        c, 0, s, 0,
        0, 1, 0, 0,
        -s, 0, c, 0,
        0, 0, 0, 1
    );
}

[numthreads(64,1,1)]
void CalculateBladePositions (uint3 id : SV_DispatchThreadID)
{
    // Avoid overflow
    // if (id.x > _TerrainTriangleCount * _NumberOfBladesPerTri)
    //     return;

    
    const int triStart = floor(id.x / _NumberOfBladesPerTri) * 3;
    const float3 posA = _TerrainPositions[_TerrainTriangles[triStart]];
    const float3 posB = _TerrainPositions[_TerrainTriangles[triStart + 1]];
    const float3 posC = _TerrainPositions[_TerrainTriangles[triStart + 2]];

    // Modulo to prevent strange noise
    const float2 seed1 = float2(id.x % _TerrainTriangleCount, id.y);
    const float2 seed2 = float2(id.y, id.x % _TerrainTriangleCount);

    float scaleY = _Scale * randomRange(seed1, _MinBladeHeight, _MaxBladeHeight);
    
    // https://gist.github.com/danieldownes/b1c9bab09cce013cc30a4198bfeda0aa
    float r1 = randomRange(seed1, 0, 1);
    float r2 = randomRange(seed2, 0, 1);
    if (r1 + r2 >= 1)
    {
        r1 = 1 - r1;
        r2 = 1 - r2;
    }
    float3 randomPosition = posA + r1 * (posB - posA) + r2 * (posC - posA);

    const float4x4 grassTransformMatrix = float4x4
    (
        _Scale,	0,		0,		randomPosition.x,
        0,		scaleY,	0,		randomPosition.y,
        0,		0,		_Scale,	randomPosition.z,
        0,		0,		0,		1
    );

    const float4x4 randomRotationMatrix = rotateY(randomRange(seed1, 0.0f, TWO_PI));

    _TransformMatrices[id.x] = mul(_ChunkPosition, mul(_TerrainObjectToWorld, mul(grassTransformMatrix, randomRotationMatrix)));
}
